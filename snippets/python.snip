# Dictionaries
snippet samplenestdic
alias nestdic
abbr Sample nested dictionary
	students = {
		"Peter": {"age": 10, "address": "Lisbon"},
		"Isabel": {"age": 11, "address": "Sesimbra"},
		"Anna": {"age": 9, "address": "Lisbon"}
	}
	${0}

snippet sampledict
alias smpdict sdict
abbr Sample dictionary
	ages = {
		"Peter": 10,
		"Isabel": 11,
		"Anna": 9,
		"Thomas": 10,
		"Bob": 10,
		"Joseph": 11,
		"Maria": 12,
		"Gabriel": 10
	}
	${0}

snippet nd
abbr dict = {} - New dictionary
	${1} = {}
	${0}

snippet di
abbr dict_name["key"] = value
	${1}["${2}"] = ${3}

snippet dg
	${1}.get(${2}, 0)

snippet dk
abbr dict[key]
	dict[key]${0}

snippet forkvindic
alias forkv
abbr for key, value in dictionary.items()
options head
	for key, value in ${1}.items():
		${2}

# Lists
snippet duplist
alias dupe list
abbr Duplicate list
	List = [1, 1, 2, 2, 3, 3, 3]
	${0}

snippet samplelist
alias smplist slist
abbr Sample list
	List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
	${0}

snippet nl
abbr New list
	${1} = [${2}]

# List functions
snippet rev
	reverse(${1}):

# Tuples
snippet et
	${1} = (${2})

snippet wh
alias while
	while ${1:condition}:
		${2:# code...}

snippet fori
abbr for i in list:
	for ${1} in ${2}:
		${3}

snippet forir
	for ${1} in range(${2}):
		${3}

snippet forirl
	for ${1} in range(len(${2})):
		${3}

snippet enum
	for i, item in enumerate(list_): ${1}

snippet pr
	print(${1}

snippet prt
	print(${1})

snippet ifnm
abbr if __name__ == "__main__"
	if __name__ == "__main__":
	${0}

# Functions
snippet dis
	def __init__(self${1}):
		${2}

snippet dss
	def __str__(self${1}):
		${2}

snippet df
	def ${1}(${2}):
		${3}

snippet cls
	class ${1}(${2}):
		${3}

snippet dfs
	def __str__(self${1}):
		${2}

snippet prty
abbr print(type(var))
	print(type(${1}))

snippet dstr
abbr print docString
	"""
	${1}
	"""
	${2}

# SQLAlchemy
snippet sacs
	sa.Column(sa.String)

snippet _name
	__name__

# Strings
snippet pss
abbr print(string[start:stop]) - String slice
	print(${1}[${2}:${3}]
